@page "/roles"
@inherits OwningComponentBase<RoleManager<AppRole>>
@attribute [Authorize(Roles = "Admins")]

<h3>Roles</h3>

@if (_items == null)
{
    <p>Loading ...</p>
}
else
{
    <div class="table-responsive tableFixHead">
        <table class="table table-sm table-bordered table-hover table-striped">
            <caption>List of Roles</caption>
            <thead>
                <tr>
                    <th scope="col">
                        <button class="btn btn-outline-success" @onclick="add" title="Add"><span class="oi oi-plus" aria-hidden="true"></span></button>
                    </th>
                    <th scope="col">Id</th>
                    <th scope="col">Name</th>
                    <th scope="col">Farsi Name</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @{
                    int rowNbr = 1;
                }
                @foreach (var item in _items)
                {
                    <tr>
                        <td>@(rowNbr++)</td>
                        <td>@item.Id</td>
                        <td>@item.Name</td>
                        <td>@item.FaName</td>
                        <td>
                            @if (item.CreatedBy != "seed")
                            {
                                <button class="btn btn-outline-primary" @onclick="(()=>edit(item))" title="Edit"><span class="oi oi-pencil" aria-hidden="true"></span></button>
                                <button class="btn btn-outline-danger" @onclick="(async ()=>await delete(item))" title="Delete"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                <button class="btn btn-outline-warning" @onclick="(()=>accessRights(item))" title="access rights">access rights</button>
                            }

                        </td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
}

@if (_show)
{
    <div class="modal" tabindex="-1" style="display:block;">

        <EditForm Model="_model" OnValidSubmit="@(async () => await validsubmit())">

            <div class="modal-dialog modal-dialog-scrollable modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-info">@(_model.Id == null ? "Add" : "Edit") Category</h5>
                        <button type="button" class="close" @onclick="close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="row">
                            <DataAnnotationsValidator />

                            <div class="text-danger">
                                <ul>
                                    @foreach (var error in _serverSideErrors)
                                    {
                                        <li>@error</li>
                                    }
                                </ul>
                            </div>
                            @*<ValidationSummary />*@

                            <div class="col-12">
                                <div class="row">
                                    <div class="col-4">
                                        Role Name
                                    </div>
                                    <div class="col-8">
                                        <div class="form-group">
                                            <InputText class="form-control" @bind-Value="@_model.Name" />
                                        </div>
                                    </div>

                                    <div class="col-4"></div>
                                    <div class="col-8"><ValidationMessage For="@(()=> _model.Name)"></ValidationMessage></div>
                                </div>
                            </div>

                            <div class="col-12">
                                <div class="row">
                                    <div class="col-4">
                                        Role Farsi Name
                                    </div>
                                    <div class="col-8">
                                        <div class="form-group">
                                            <InputText class="form-control" @bind-Value="@_model.FaName" />
                                        </div>
                                    </div>

                                    <div class="col-4"></div>
                                    <div class="col-8"><ValidationMessage For="@(()=> _model.FaName)"></ValidationMessage></div>
                                </div>
                            </div>

                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-success" data-dismiss="modal">
                            <span aria-hidden="true">save</span>
                        </button>
                        <button type="button" class="btn btn-light" @onclick="close">
                            <span aria-hidden="true">close</span>
                        </button>
                    </div>
                </div>
            </div>

        </EditForm>
    </div>
}

@code {
    private RoleManager<AppRole> _roleManager => Service;

    [Inject] private IJSRuntime _js { get; set; }
    [Inject] private NavigationManager _navigationManager { get; set; }

    List<AppRole> _items;
    RoleViewModel _model;
    private bool _show;
    private List<string> _serverSideErrors = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        _items = await _roleManager.Roles.ToListAsync();
    }

    private async Task validsubmit()
    {
        _serverSideErrors.Clear();

        if (!string.IsNullOrEmpty(_model.Name) && !string.IsNullOrEmpty(_model.FaName))
        {
            _show = false;

            IdentityResult result;

            if (_model.Id == null)
            {
                result = await _roleManager.CreateAsync(new AppRole(_model.Name, _model.FaName));
            }
            else
            {
                var itemToUpdate = await _roleManager.Roles.SingleAsync(x => x.Id == _model.Id);
                itemToUpdate.Name = _model.Name;
                itemToUpdate.FaName = _model.FaName;
                result = await _roleManager.UpdateAsync(itemToUpdate);
            }

            if (result.Succeeded)
            {
                //saved
                await _js.InvokeVoidAsync("alert", "Data saved");

                _items = await _roleManager.Roles.ToListAsync();
            }
            else
            {
                foreach (IdentityError err in result.Errors)
                {
                    _serverSideErrors.Add(err.Description);
                }

                //error
                await _js.InvokeVoidAsync("alert", "Error saving data");
            }
        }
        else
        {
            _serverSideErrors.Add("Please fill in all fields");

            //error
            await _js.InvokeVoidAsync("alert", "Please fill in all fields");
        }
    }

    private void add()
    {
        _serverSideErrors.Clear();

        _model = new RoleViewModel();

        _show = true;
    }

    private void edit(AppRole model)
    {
        _serverSideErrors.Clear();

        _model = new RoleViewModel { Id = model.Id, Name = model.Name, FaName = model.FaName };

        _show = true;
    }

    private async Task delete(AppRole model)
    {
        _serverSideErrors.Clear();

        if (await _js.InvokeAsync<bool>("confirm", "Are absolutely you sure you want to delete this item?"))
        {
            _model = null;
            var result = await _roleManager.DeleteAsync(model);
            if (result.Succeeded)
            {
                //saved
                await _js.InvokeVoidAsync("alert", "Data saved");

                _items = await _roleManager.Roles.ToListAsync();
            }
            else
            {
                foreach (IdentityError err in result.Errors)
                {
                    _serverSideErrors.Add(err.Description);
                }

                //error
                await _js.InvokeVoidAsync("alert", "Error deleting data");
            }
        }

    }

    private void accessRights(AppRole model)
    {
        _navigationManager.NavigateTo($"/accessrights/role/{model.Id}");
    }

    private void close()
    {
        _show = false;
    }

    private class RoleViewModel
    {
        public string Id { get; set; }
        [Display(Name = "نام لاتین")]
        [Required(ErrorMessage = "لطفا {0} را وارد نمائید")]
        public string Name { get; set; }
        [Display(Name = "نام")]
        [Required(ErrorMessage = "لطفا {0} را وارد نمائید")]
        public string FaName { get; set; }
    }
}
